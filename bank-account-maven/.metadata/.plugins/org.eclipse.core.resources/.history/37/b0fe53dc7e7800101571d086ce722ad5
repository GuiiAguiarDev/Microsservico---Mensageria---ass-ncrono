package com.bank.service;

import java.math.BigDecimal;


import org.springframework.stereotype.Service;

import com.bank.client.ClientService;
import com.bank.dto.ClientDTO;
import com.bank.dto.ClientCurrentAccountRequestDTO;
import com.bank.dto.ClientCurrentAccountResponseDTO;
import com.bank.exception.ResourceNotFoundException;
import com.bank.model.CurrentAccount;
import com.bank.repository.CurrentAccountRepository;

@Service
public class CurrentAccountService {

	private final CurrentAccountRepository accountRepository;
	private final ClientService clienteServiceClient;

	public CurrentAccountService(CurrentAccountRepository accountRepository, ClientService clienteServiceClient) {
		this.accountRepository = accountRepository;
		this.clienteServiceClient = clienteServiceClient;

	}

	public CurrentAccount createCurrentAccount(ClientCurrentAccountRequestDTO request) {

		ClientDTO client = clienteServiceClient.getClientById(request.getClientId());
		if (client == null) {
			throw new RuntimeException("Client not found");
		}
		CurrentAccount account = new CurrentAccount();
		account.setNumber(request.getNumber());
		account.setBalance(request.getBalance());
		account.setCreateDate(request.getCreateDate());
		account.setClientId(request.getClientId());
		return accountRepository.save(account);
	}

	public CurrentAccount findById(Long id) {
		return accountRepository.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Client not found with id: " + id));
	}

	

	public CurrentAccount deposit(Long accountId, BigDecimal amount) {
		if (amount == null || amount.compareTo(BigDecimal.ZERO) <= 0) {
			throw new com.bank.exception.InvalidTransactionException("Valor do deposito deve ser maior que zero");

		}
		CurrentAccount account = accountRepository.findById(accountId)
				.orElseThrow(() -> new ResourceNotFoundException("conta not found"));

		account.setBalance(account.getBalance().add(amount));
		return accountRepository.save(account);
	}

	public BigDecimal getBalance(Long accountId) {
		CurrentAccount account = accountRepository.findById(accountId)
				.orElseThrow(() -> new ResourceNotFoundException("account not found"));

		return account.getBalance();
	}

}
